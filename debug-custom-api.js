
console.log('üîß [DEBUG] –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Custom API —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...');

function maskSensitive(value, type = 'password') {
  if (!value) return '[–Ω–µ –∑–∞–¥–∞–Ω–æ]';
  if (type === 'password') return '*'.repeat(Math.min(value.length, 8));
  if (type === 'token') return value.substring(0, 10) + '...' + value.substring(value.length - 4);
  return value;
}

async function testChromeStorageAPI() {
  console.log('\nüì¶ [TEST 1] –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Chrome Storage API...');
  
  if (typeof chrome === 'undefined') {
    console.error('‚ùå Chrome API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    return false;
  }
  
  if (!chrome.storage) {
    console.error('‚ùå chrome.storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    return false;
  }
  
  console.log('‚úÖ Chrome Storage API –¥–æ—Å—Ç—É–ø–µ–Ω');
  console.log('  - chrome.storage.sync:', !!chrome.storage.sync);
  console.log('  - chrome.storage.local:', !!chrome.storage.local);
  return true;
}

async function testSettingsStorage() {
  console.log('\nüíæ [TEST 2] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
  
  const testSettings = {
    syncData: {
      provider: 'custom',
      model: 'test-model-gpt-4o',
      authUrl: 'https://test-api.example.com/auth/v1/token',
      chatUrl: 'https://test-api.example.com/public/v1/chat/completions',
      username: 'test-user',
      temperature: 0.7,
      systemRole: 'system',
      userRole: 'user',
      systemPrompt: '–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.',
      customEndpointFormat: 'token-auth'
    },
    localData: {
      password: 'test-password-123'
    }
  };
  
  try {
    console.log('üìù –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
    await new Promise((resolve, reject) => {
      chrome.storage.sync.set(testSettings.syncData, () => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve();
        }
      });
    });
    
    await new Promise((resolve, reject) => {
      chrome.storage.local.set(testSettings.localData, () => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve();
        }
      });
    });
    
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    
    console.log('üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...');
    const syncData = await new Promise((resolve, reject) => {
      chrome.storage.sync.get(Object.keys(testSettings.syncData), (data) => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve(data);
        }
      });
    });
    
    const localData = await new Promise((resolve, reject) => {
      chrome.storage.local.get(Object.keys(testSettings.localData), (data) => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve(data);
        }
      });
    });
    
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    console.log('üìä Sync Storage –¥–∞–Ω–Ω—ã–µ:');
    Object.entries(syncData).forEach(([key, value]) => {
      console.log(`  - ${key}: ${value}`);
    });
    
    console.log('üîí Local Storage –¥–∞–Ω–Ω—ã–µ (–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ):');
    Object.entries(localData).forEach(([key, value]) => {
      console.log(`  - ${key}: ${maskSensitive(value, 'password')}`);
    });
    
    return { syncData, localData };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:', error);
    return null;
  }
}

async function testTokenAuthentication(settings) {
  console.log('\nüîê [TEST 3] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
  
  if (!settings || !settings.syncData.authUrl) {
    console.error('‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ authUrl –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    return null;
  }
  
  const { syncData, localData } = settings;
  
  console.log('üåê –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
  console.log(`  - Auth URL: ${syncData.authUrl}`);
  console.log(`  - Username: ${syncData.username}`);
  console.log(`  - Password: ${maskSensitive(localData.password, 'password')}`);
  
  console.log('üì° –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
  
  const authPayload = {
    username: syncData.username,
    password: localData.password
  };
  
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:');
  console.log(`  POST ${syncData.authUrl}`);
  console.log('  Headers: Content-Type: application/json');
  console.log('  Body:', JSON.stringify({
    username: syncData.username,
    password: maskSensitive(localData.password, 'password')
  }, null, 2));
  
  const mockToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.test-token-payload.signature';
  console.log('‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:');
  console.log(`  - access_token: ${maskSensitive(mockToken, 'token')}`);
  
  return mockToken;
}

async function testChatAPICall(settings, token) {
  console.log('\nü§ñ [TEST 4] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Chat API...');
  
  if (!settings || !token) {
    console.error('‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    return null;
  }
  
  const { syncData } = settings;
  
  console.log('üåê –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Chat API:');
  console.log(`  - Chat URL: ${syncData.chatUrl}`);
  console.log(`  - Model: ${syncData.model}`);
  console.log(`  - Temperature: ${syncData.temperature}`);
  console.log(`  - Token: ${maskSensitive(token, 'token')}`);
  
  console.log('üì° –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Chat API...');
  
  const chatPayload = {
    model: syncData.model,
    temperature: syncData.temperature,
    messages: [
      {
        role: syncData.systemRole,
        content: syncData.systemPrompt
      },
      {
        role: syncData.userRole,
        content: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
      }
    ]
  };
  
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:');
  console.log(`  POST ${syncData.chatUrl}`);
  console.log('  Headers:');
  console.log('    Content-Type: application/json');
  console.log(`    Authorization: Bearer ${maskSensitive(token, 'token')}`);
  console.log('    x-proxy-mask-critical-data: 1');
  console.log('  Body:', JSON.stringify(chatPayload, null, 2));
  
  const mockResponse = {
    choices: [
      {
        message: {
          role: 'assistant',
          content: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ API –≤—ã–∑–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!'
        }
      }
    ]
  };
  
  console.log('‚úÖ –°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:');
  console.log('  Response:', JSON.stringify(mockResponse, null, 2));
  
  return mockResponse.choices[0].message.content;
}

async function testSettingsMigration() {
  console.log('\nüîÑ [TEST 5] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
  
  const oldSettings = {
    provider: 'custom',
    model: 'old-model',
    authUrl: 'https://old-api.com/auth',
    chatUrl: 'https://old-api.com/chat',
    username: 'old-user',
    password: 'old-password'
  };
  
  console.log('üìù –°–∏–º—É–ª–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ chrome.storage.local...');
  
  try {
    await new Promise((resolve, reject) => {
      chrome.storage.local.set(oldSettings, () => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve();
        }
      });
    });
    
    console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ local storage');
    
    console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    const keysToMigrate = ['provider', 'model', 'authUrl', 'chatUrl', 'username'];
    const syncData = {};
    const localData = { password: oldSettings.password };
    
    keysToMigrate.forEach(key => {
      if (oldSettings[key] !== undefined) {
        syncData[key] = oldSettings[key];
      }
    });
    
    await new Promise((resolve, reject) => {
      chrome.storage.sync.set(syncData, () => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve();
        }
      });
    });
    
    console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ sync storage');
    console.log('üìä –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
    Object.entries(syncData).forEach(([key, value]) => {
      console.log(`  - ${key}: ${value}`);
    });
    
    await new Promise((resolve, reject) => {
      chrome.storage.local.remove(keysToMigrate, () => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve();
        }
      });
    });
    
    console.log('‚úÖ –°—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ local storage');
    console.log('üîí –ü–∞—Ä–æ–ª—å –æ—Å—Ç–∞–ª—Å—è –≤ local storage –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
    return false;
  }
}

async function testSettingsPersistence() {
  console.log('\nüîÑ [TEST 6] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
  
  console.log('üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏:');
  console.log('  1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞—Å—Ç–æ–º–Ω—ã–π API –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è');
  console.log('  2. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
  console.log('  3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ chrome://extensions/');
  console.log('  4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è');
  console.log('  5. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–Ω–æ–≤–∞');
  console.log('  6. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å');
  
  try {
    const syncData = await new Promise((resolve, reject) => {
      chrome.storage.sync.get(null, (data) => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve(data);
        }
      });
    });
    
    const localData = await new Promise((resolve, reject) => {
      chrome.storage.local.get(null, (data) => {
        if (chrome.runtime.lastError) {
          reject(chrome.runtime.lastError);
        } else {
          resolve(data);
        }
      });
    });
    
    console.log('üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ sync storage:');
    if (Object.keys(syncData).length === 0) {
      console.log('  (–ø—É—Å—Ç–æ)');
    } else {
      Object.entries(syncData).forEach(([key, value]) => {
        console.log(`  - ${key}: ${value}`);
      });
    }
    
    console.log('üîí –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ local storage (–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ):');
    if (Object.keys(localData).length === 0) {
      console.log('  (–ø—É—Å—Ç–æ)');
    } else {
      Object.entries(localData).forEach(([key, value]) => {
        const maskedValue = (key === 'password' || key === 'apiKey') 
          ? maskSensitive(value, 'password') 
          : value;
        console.log(`  - ${key}: ${maskedValue}`);
      });
    }
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    return false;
  }
}

async function runAllTests() {
  console.log('üöÄ [MAIN] –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Custom API —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏');
  console.log('=' .repeat(60));
  
  const results = {
    chromeAPI: false,
    storage: null,
    auth: null,
    chatAPI: null,
    migration: false,
    persistence: false
  };
  
  try {
    results.chromeAPI = await testChromeStorageAPI();
    if (!results.chromeAPI) {
      console.log('\n‚ùå [–†–ï–ó–£–õ–¨–¢–ê–¢] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ - Chrome API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return results;
    }
    
    results.storage = await testSettingsStorage();
    
    if (results.storage) {
      results.auth = await testTokenAuthentication(results.storage);
    }
    
    if (results.storage && results.auth) {
      results.chatAPI = await testChatAPICall(results.storage, results.auth);
    }
    
    results.migration = await testSettingsMigration();
    
    results.persistence = await testSettingsPersistence();
    
    console.log('\n' + '=' .repeat(60));
    console.log('üìã [–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log('=' .repeat(60));
    
    console.log(`‚úÖ Chrome Storage API: ${results.chromeAPI ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${results.storage ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    console.log(`‚úÖ –¢–æ–∫–µ–Ω-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${results.auth ? '–°–ò–ú–£–õ–Ø–¶–ò–Ø –£–°–ü–ï–®–ù–ê' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    console.log(`‚úÖ Chat API –∑–∞–ø—Ä–æ—Å—ã: ${results.chatAPI ? '–°–ò–ú–£–õ–Ø–¶–ò–Ø –£–°–ü–ï–®–ù–ê' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${results.migration ? '–†–ê–ë–û–¢–ê–ï–¢' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    console.log(`‚úÖ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${results.persistence ? '–ü–†–û–í–ï–†–ï–ù–ê' : '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}`);
    
    const successCount = Object.values(results).filter(r => r !== null && r !== false).length;
    const totalTests = Object.keys(results).length;
    
    console.log(`\nüéØ [–û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢] ${successCount}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ`);
    
    if (successCount === totalTests) {
      console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! Custom API —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    } else {
      console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤—ã—à–µ.');
    }
    
    return results;
    
  } catch (error) {
    console.error('‚ùå [–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ:', error);
    return results;
  }
}

console.log('üîß –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ runAllTests() –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
console.log('üí° –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã:');
console.log('  - testChromeStorageAPI()');
console.log('  - testSettingsStorage()');
console.log('  - testSettingsMigration()');
console.log('  - testSettingsPersistence()');

runAllTests();
